#!/bin/bash
#
# Univention Container Mode - apt-sources-list
#
# Copyright 2020-2021 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

## util(s)
source /usr/lib/univention-container-mode/utils.sh || exit 1

## function(s)
# function name() { # name: (IN)[>(OUT)]
# 	echo function
# }

## ucr shell
# eval "$(ucr shell hostname domainname)"

## declare
declare -a ucrchanges
# ucrchanges+=("key=value")
declare -a ucrremoves
# ucrremoves+=("key")

declare -A ucrcounter
# ucrcounter[<STRING>]=<INT>

declare -A ucrcommit
# ucrcommit+=/<PATH>/<FILE> OR ucrcommit[<FILE>]=/<PATH>/<FILE>

debug "### START SCRIPT($(pwd)/$0) ###"
## create the latest container mode environment based on github repository default tag or form specific version
#
[[ ${LATEST:-TRUE} =~ ^1|yes|true|YES|TRUE$ ]] && command -v python3 >/dev/null 2>&1 && python3 -c 'import json; import urllib.request;' && {
	GITHUB="https://api.github.com/repos/univention/univention-corporate-server/tags"

	LATEST=$(
		python3 -c "import json; import urllib.request; g = urllib.request.urlopen('${GITHUB}'); e = g.info().get_content_charset('utf-8'); print(json.loads(g.read().decode(e))[0]['name'])" 2>/dev/null
	)

	ARCH="amd64"

	MAJOR=$(echo ${VERSION:-${LATEST/release-/}} | tr --complement --delete '[:digit:]' | awk NF=NF FS= | awk '{ print $1 }')
	MINOR=$(echo ${VERSION:-${LATEST/release-/}} | tr --complement --delete '[:digit:]' | awk NF=NF FS= | awk '{ print $2 }')
	PATCH=$(echo ${VERSION:-${LATEST/release-/}} | tr --complement --delete '[:digit:]' | awk NF=NF FS= | awk '{ print $3 }')

	SUITE="ucs${MAJOR}${MINOR}${PATCH}"

	echo ${VERSION-} | tr --complement --delete '[:digit:]' | egrep --quiet -- "^[[:digit:]][[:digit:]][[:digit:]]$" && {
		echo "TRY FORCE VERSION UCS(${MAJOR}.${MINOR}-${PATCH}) ..."
	} || {
		echo "TRY LATEST VERSION FROM GITHUB(${GITHUB}) UCS(${MAJOR}.${MINOR}-${PATCH}) ..."
	}

	echo ${MAJOR}.${MINOR}-${PATCH} | egrep --quiet -- "^[[:digit:]]\.[[:digit:]]\-[[:digit:]]$" && {
		[[ -f /etc/apt/mirror.url ]] && MIRROR=$(tr --delete '\n' </etc/apt/mirror.url) || MIRROR="https://updates.software-univention.de"

		[[ ${MAJOR} -ge 5 ]] || MIRROR="${MIRROR}/${MAJOR}.${MINOR}/maintained/${MAJOR}.${MINOR}-${PATCH}"

		if [[ ${MAJOR} -ge 5 ]]; then
			echo -e "deb [arch=${ARCH}] ${MIRROR} ${SUITE} main\ndeb [arch=${ARCH}] ${MIRROR} ${SUITE/ucs/errata} main" > \
				/etc/apt/sources.list
		else
			echo -e "deb [arch=${ARCH}] ${MIRROR} ${SUITE} main\ndeb [arch=${ARCH}] ${MIRROR/${MAJOR}.${MINOR}-${PATCH}/component} ${MAJOR}.${MINOR}-${PATCH}-errata/all/\ndeb [arch=${ARCH}] ${MIRROR/${MAJOR}.${MINOR}-${PATCH}/component} ${MAJOR}.${MINOR}-${PATCH}-errata/${ARCH}/" > \
				/etc/apt/sources.list
		fi

		cat /etc/apt/sources.list
	}
}
#
## create the latest container mode environment based on github repository default tag or form specific version
debug "### STOPP SCRIPT($(pwd)/$0) ###"

## ucr removes
UniventionConfigRegistryUnSet ${ucrremoves[@]}

## ucr changes
UniventionConfigRegistrySet ${ucrchanges[@]}

## ucr commit
UniventionConfigCommit ${ucrcommit[@]}

## cleanup
unset \
	ucrchanges ucrremoves ucrcounter ucrcommit

debug "### CLEAN SCRIPT($(pwd)/$0) ###"
